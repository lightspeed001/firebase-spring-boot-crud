trigger:
  branches:
    include:
      - main
  paths:
    include:
      - 2023-12-aks-argocd-pipeline

resources:
  repositories:
    - repository: deployment-repo
      type: github
      endpoint: lightspeed001
      name: lightspeed001/devops-argocd

variables:
  - name: artifactName
    value: deployment
  - name: componentName
    value: app-01
  - name: gitUserEmailAddress
    value: ed@reanimate.io

stages:
  - stage: Build
    jobs:
      - job: Build

        pool:
          vmImage: ubuntu-latest

        variables:
          applicationFolder: $(Build.Repository.LocalPath)/2023-12-aks-argocd-pipeline/Application/app-01
          containerRepository: app-01
          buildConfiguration: "Release"
          deploymentFolder: $(applicationFolder)/deployment
          outputFolder: $(applicationFolder)/output/

        steps:
          - task: DotNetCoreCLI@2
            displayName: Build & Publish
            inputs:
              command: "publish"
              publishWebProjects: false
              modifyOutputPath: false
              workingDirectory: $(applicationFolder)
              arguments: --output $(outputFolder) -c $(buildConfiguration) --self-contained true
              zipAfterPublish: false

          - task: Docker@2
            displayName: Login to ACR
            inputs:
              command: login
              containerRegistry: AzureContainerRegistry

          - task: Docker@2
            displayName: Build Docker image
            inputs:
              containerRegistry: AzureContainerRegistry
              repository: $(containerRepository)
              command: "build"
              Dockerfile: $(applicationFolder)/Dockerfile
              buildContext: $(applicationFolder)
              tags: |
                $(Build.BuildId)
                latest

          - task: Docker@2
            displayName: Push Docker image
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
            inputs:
              containerRegistry: AzureContainerRegistry
              repository: $(containerRepository)
              command: "push"
              tags: |
                $(Build.BuildId)
                latest

          - task: CopyFiles@2
            displayName: Copy deployment manifests
            inputs:
              sourceFolder: $(deploymentFolder)
              contents: "**"
              targetFolder: $(Build.ArtifactStagingDirectory)
              overwrite: true

          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: Replace tokens
            inputs:
              rootDirectory: $(Build.ArtifactStagingDirectory)/base
              targetFiles: "deployment.yaml"
              encoding: auto
              writeBOM: true
              escapeType: no escaping
              actionOnMissing: log warning
              tokenPrefix: __
              tokenSuffix: __

          - publish: $(Build.ArtifactStagingDirectory)
            artifact: $(artifactName)

  - stage: Staging
    jobs:
      - deployment: Staging

        environment:
          name: aks-staging

        pool:
          vmImage: "ubuntu-latest"

        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: deployment-repo
                  persistCredentials: true
                  clean: true

                - task: DownloadPipelineArtifact@2
                  inputs:
                    artifact: $(artifactName)
                    patterns: |
                      base/**
                      overlays/staging/**

                    path: $(Build.Repository.LocalPath)/kustomize/$(componentName)

                - task: PowerShell@2
                  displayName: Commit to Deployment repo
                  inputs:
                    targetType: "inline"
                    workingDirectory: $(Build.Repository.LocalPath)
                    script: |
                      git config user.email "$(gitUserEmailAddress)"
                      git config user.name "build"
                      git stash
                      git remote update
                      git fetch
                      git checkout --track origin/main
                      git stash pop
                      git add .
                      git commit -m "$(componentName): staging deployment"
                      git push origin HEAD:main

  - stage: Production
    jobs:
      - deployment: Production

        environment:
          name: aks-production

        pool:
          vmImage: "ubuntu-latest"

        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: deployment-repo
                  persistCredentials: true
                  clean: true

                - task: DownloadPipelineArtifact@2
                  inputs:
                    artifact: $(artifactName)
                    patterns: |
                      base/**
                      overlays/production/**

                    path: $(Build.Repository.LocalPath)/kustomize/$(componentName)

                - task: PowerShell@2
                  displayName: Commit to Deployment repo
                  inputs:
                    targetType: "inline"
                    workingDirectory: $(Build.Repository.LocalPath)
                    script: |
                      git config user.email "$(gitUserEmailAddress)"
                      git config user.name "build"
                      git stash
                      git remote update
                      git fetch
                      git checkout --track origin/main
                      git stash pop
                      git add .
                      git commit -m "$(componentName): production deployment"
                      git push origin HEAD:main
